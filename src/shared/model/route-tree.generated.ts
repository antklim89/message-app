/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../../app/routes/__root'
import { Route as SearchRouteImport } from './../../app/routes/search'
import { Route as ProfileSettingsRouteImport } from './../../app/routes/profile-settings'
import { Route as ProfileRouteImport } from './../../app/routes/profile'
import { Route as FavoriteMessagesRouteImport } from './../../app/routes/favorite-messages'
import { Route as AboutRouteImport } from './../../app/routes/about'
import { Route as IndexRouteImport } from './../../app/routes/index'
import { Route as ProfileProfileIdRouteImport } from './../../app/routes/profile.$profileId'
import { Route as HashtagHashtagRouteImport } from './../../app/routes/hashtag.$hashtag'
import { Route as AnswersAnswerIdRouteImport } from './../../app/routes/answers.$answerId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileSettingsRoute = ProfileSettingsRouteImport.update({
  id: '/profile-settings',
  path: '/profile-settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const FavoriteMessagesRoute = FavoriteMessagesRouteImport.update({
  id: '/favorite-messages',
  path: '/favorite-messages',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileProfileIdRoute = ProfileProfileIdRouteImport.update({
  id: '/$profileId',
  path: '/$profileId',
  getParentRoute: () => ProfileRoute,
} as any)
const HashtagHashtagRoute = HashtagHashtagRouteImport.update({
  id: '/hashtag/$hashtag',
  path: '/hashtag/$hashtag',
  getParentRoute: () => rootRouteImport,
} as any)
const AnswersAnswerIdRoute = AnswersAnswerIdRouteImport.update({
  id: '/answers/$answerId',
  path: '/answers/$answerId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/favorite-messages': typeof FavoriteMessagesRoute
  '/profile': typeof ProfileRouteWithChildren
  '/profile-settings': typeof ProfileSettingsRoute
  '/search': typeof SearchRoute
  '/answers/$answerId': typeof AnswersAnswerIdRoute
  '/hashtag/$hashtag': typeof HashtagHashtagRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/favorite-messages': typeof FavoriteMessagesRoute
  '/profile': typeof ProfileRouteWithChildren
  '/profile-settings': typeof ProfileSettingsRoute
  '/search': typeof SearchRoute
  '/answers/$answerId': typeof AnswersAnswerIdRoute
  '/hashtag/$hashtag': typeof HashtagHashtagRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/favorite-messages': typeof FavoriteMessagesRoute
  '/profile': typeof ProfileRouteWithChildren
  '/profile-settings': typeof ProfileSettingsRoute
  '/search': typeof SearchRoute
  '/answers/$answerId': typeof AnswersAnswerIdRoute
  '/hashtag/$hashtag': typeof HashtagHashtagRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/favorite-messages'
    | '/profile'
    | '/profile-settings'
    | '/search'
    | '/answers/$answerId'
    | '/hashtag/$hashtag'
    | '/profile/$profileId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/favorite-messages'
    | '/profile'
    | '/profile-settings'
    | '/search'
    | '/answers/$answerId'
    | '/hashtag/$hashtag'
    | '/profile/$profileId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/favorite-messages'
    | '/profile'
    | '/profile-settings'
    | '/search'
    | '/answers/$answerId'
    | '/hashtag/$hashtag'
    | '/profile/$profileId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  FavoriteMessagesRoute: typeof FavoriteMessagesRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  ProfileSettingsRoute: typeof ProfileSettingsRoute
  SearchRoute: typeof SearchRoute
  AnswersAnswerIdRoute: typeof AnswersAnswerIdRoute
  HashtagHashtagRoute: typeof HashtagHashtagRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile-settings': {
      id: '/profile-settings'
      path: '/profile-settings'
      fullPath: '/profile-settings'
      preLoaderRoute: typeof ProfileSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favorite-messages': {
      id: '/favorite-messages'
      path: '/favorite-messages'
      fullPath: '/favorite-messages'
      preLoaderRoute: typeof FavoriteMessagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$profileId': {
      id: '/profile/$profileId'
      path: '/$profileId'
      fullPath: '/profile/$profileId'
      preLoaderRoute: typeof ProfileProfileIdRouteImport
      parentRoute: typeof ProfileRoute
    }
    '/hashtag/$hashtag': {
      id: '/hashtag/$hashtag'
      path: '/hashtag/$hashtag'
      fullPath: '/hashtag/$hashtag'
      preLoaderRoute: typeof HashtagHashtagRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/answers/$answerId': {
      id: '/answers/$answerId'
      path: '/answers/$answerId'
      fullPath: '/answers/$answerId'
      preLoaderRoute: typeof AnswersAnswerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ProfileRouteChildren {
  ProfileProfileIdRoute: typeof ProfileProfileIdRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileProfileIdRoute: ProfileProfileIdRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  FavoriteMessagesRoute: FavoriteMessagesRoute,
  ProfileRoute: ProfileRouteWithChildren,
  ProfileSettingsRoute: ProfileSettingsRoute,
  SearchRoute: SearchRoute,
  AnswersAnswerIdRoute: AnswersAnswerIdRoute,
  HashtagHashtagRoute: HashtagHashtagRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

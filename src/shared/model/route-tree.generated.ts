/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../../app/routes/__root'
import { Route as ProfileRouteImport } from './../../app/routes/profile'
import { Route as AboutRouteImport } from './../../app/routes/about'
import { Route as IndexRouteImport } from './../../app/routes/index'
import { Route as ProfileIndexRouteImport } from './../../app/routes/profile.index'
import { Route as ProfileSettingsRouteImport } from './../../app/routes/profile.settings'
import { Route as AnswersAnswerIdRouteImport } from './../../app/routes/answers.$answerId'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProfileRoute,
} as any)
const ProfileSettingsRoute = ProfileSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProfileRoute,
} as any)
const AnswersAnswerIdRoute = AnswersAnswerIdRouteImport.update({
  id: '/answers/$answerId',
  path: '/answers/$answerId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/profile': typeof ProfileRouteWithChildren
  '/answers/$answerId': typeof AnswersAnswerIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/profile/': typeof ProfileIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/answers/$answerId': typeof AnswersAnswerIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/profile': typeof ProfileIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/profile': typeof ProfileRouteWithChildren
  '/answers/$answerId': typeof AnswersAnswerIdRoute
  '/profile/settings': typeof ProfileSettingsRoute
  '/profile/': typeof ProfileIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/profile'
    | '/answers/$answerId'
    | '/profile/settings'
    | '/profile/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/answers/$answerId' | '/profile/settings' | '/profile'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/profile'
    | '/answers/$answerId'
    | '/profile/settings'
    | '/profile/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  AnswersAnswerIdRoute: typeof AnswersAnswerIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof ProfileRoute
    }
    '/profile/settings': {
      id: '/profile/settings'
      path: '/settings'
      fullPath: '/profile/settings'
      preLoaderRoute: typeof ProfileSettingsRouteImport
      parentRoute: typeof ProfileRoute
    }
    '/answers/$answerId': {
      id: '/answers/$answerId'
      path: '/answers/$answerId'
      fullPath: '/answers/$answerId'
      preLoaderRoute: typeof AnswersAnswerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ProfileRouteChildren {
  ProfileSettingsRoute: typeof ProfileSettingsRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileSettingsRoute: ProfileSettingsRoute,
  ProfileIndexRoute: ProfileIndexRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ProfileRoute: ProfileRouteWithChildren,
  AnswersAnswerIdRoute: AnswersAnswerIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
